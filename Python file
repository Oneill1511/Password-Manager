import json
import secrets
import os
import tkinter as tk
from tkinter import messagebox, simpledialog, scrolledtext, ttk
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
import base64

DATA_FILE = "passwords.json"

def derive_key(master_password, salt=None):
    if salt is None:
        salt = os.urandom(16)
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100000,
    )
    key = base64.urlsafe_b64encode(kdf.derive(master_password.encode()))
    return key, salt

def encrypt(password, key):
    f = Fernet(key)
    encrypted_password = f.encrypt(password.encode())
    return encrypted_password.decode()

def decrypt(encrypted_password, key):
    f = Fernet(key)
    decrypted_password = f.decrypt(encrypted_password.encode())
    return decrypted_password.decode()

def load_data():
    try:
        with open(DATA_FILE, "r") as f:
            data = json.load(f)
            return data["passwords"], base64.b64decode(data["salt"])
    except FileNotFoundError:
        return [], None
    except json.JSONDecodeError:
        return [], None

def save_data(passwords, salt):
    with open(DATA_FILE, "w") as f:
        json.dump({"passwords": passwords, "salt": base64.b64encode(salt).decode()}, f, indent=4)

def generate_password(length=16):
    alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+=-`~[]{};':\",./<>?"
    password = "".join(secrets.choice(alphabet) for i in range(length))
    return password

def add_password(master_key, salt, website, username, password, note):
    encrypted_password = encrypt(password, master_key)
    passwords, _ = load_data()
    passwords.append({"website": website, "username": username, "encrypted_password": encrypted_password, "note": note})
    save_data(passwords, salt)

def get_passwords(master_key, salt):
    passwords, _ = load_data()
    decrypted_passwords = []
    for item in passwords:
        try:
            decrypted_password = decrypt(item["encrypted_password"], master_key)
            decrypted_passwords.append({
                "website": item["website"],
                "username": item.get("username", ""),
                "password": decrypted_password,
                "note": item["note"],
            })
        except:
            decrypted_passwords.append({
                "website": item["website"],
                "username": "",
                "password": "Decryption Failed",
                "note": item["note"]
            })
    return decrypted_passwords

def delete_password(master_key, salt, index):
    passwords, _ = load_data()
    if 0 <= index < len(passwords):
        del passwords[index]
        save_data(passwords, salt)
        return True
    return False

def main():
    root = tk.Tk()
    root.title("Secure Password Manager")
    root.geometry("600x500")  # Set window size

    # Style configuration
    style = ttk.Style()
    style.configure("TButton", padding=6, font=('Helvetica', 10))
    style.configure("TLabel", padding=5, font=('Helvetica', 10))
    style.configure("TEntry", padding=5, font=('Helvetica', 10))
    style.configure("TScrolledText", font=('Courier New', 10)) #Monospace font

    master_password = simpledialog.askstring("Master Password", "Enter Master Password:", show="*")
    if not master_password:
        root.destroy()
        return

    passwords, salt = load_data()
    if salt is None:
        master_key, salt = derive_key(master_password)
    else:
        master_key, _ = derive_key(master_password, salt)

    def add_password_gui():
        website = simpledialog.askstring("Add Password", "Website:")
        if not website: return
        password = simpledialog.askstring("Add Password", "Password (leave blank to generate):", show="*")
        if not password:
            password = generate_password()
            username = simpledialog.askstring("Add Password", "Username:")
            note = simpledialog.askstring("Add Password", "Note:")
            if not username:
                username = ""
            if not note:
                note = ""
            add_password(master_key, salt, website, username, password, note)
            update_password_list()
        else:
            username = simpledialog.askstring("Add Password", "Username:")
            note = simpledialog.askstring("Add Password", "Note:")
            if not username:
                username = ""
            if not note:
                note = ""
            add_password(master_key, salt, website, username, password, note)
            update_password_list()

    def update_password_list():
        for widget in password_frame.winfo_children():
            widget.destroy() # clear old widgets

        decrypted_passwords = get_passwords(master_key, salt)
        for i, item in enumerate(decrypted_passwords):
            entry_frame = ttk.Frame(password_frame, padding="5")
            entry_frame.pack(fill=tk.X, pady=2)

            info_label = ttk.Label(entry_frame, text=f"Website: {item['website']}\nUsername: {item['username']}\nPassword: {item['password']}\nNote: {item['note']}")
            info_label.pack(side=tk.LEFT, fill=tk.X, expand=True)

            def delete_entry(index=i):
                if delete_password(master_key, salt, index):
                    update_password_list()
                else:
                    messagebox.showerror("Error", "Could not delete password.")

            delete_button = ttk.Button(entry_frame, text="Delete", command=delete_entry)
            delete_button.pack(side=tk.RIGHT)

    def save_and_exit():
        root.destroy()

    # Layout using frames and grid
    main_frame = ttk.Frame(root, padding="10 10 12 12")
    main_frame.pack(fill=tk.BOTH, expand=True)

    add_button = ttk.Button(main_frame, text="Add Password", command=add_password_gui)
    add_button.grid(row=0, column=0, sticky=tk.W, pady=5)

    password_frame = ttk.Frame(main_frame)
    password_frame.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S), pady=5)

    save_exit_button = ttk.Button(main_frame, text="Save and Exit", command=save_and_exit)
    save_exit_button.grid(row=2, column=0, columnspan=2, pady=10)

    root.columnconfigure(0, weight=1)
    root.rowconfigure(0, weight=1)
    main_frame.columnconfigure(1, weight=1)
    main_frame.rowconfigure(1, weight=1)
    password_frame.columnconfigure(0, weight=1)

    update_password_list()

    root.mainloop()

if __name__ == "__main__":
    main()
